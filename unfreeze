// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TokenFreeze {
    string public name = "Freezeable Token";
    string public symbol = "FTK";
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => bool) public frozen;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Frozen(address indexed account);
    event Unfrozen(address indexed account);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10**18;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(!frozen[msg.sender], "Sender account is frozen");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    function freeze(address account) public {
        frozen[account] = true;
        emit Frozen(account);
    }

    function unfreeze(address account) public {
        frozen[account] = false;
        emit Unfrozen(account);
    }
}
